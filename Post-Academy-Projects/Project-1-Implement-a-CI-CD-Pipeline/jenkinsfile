pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'project-1-sparta-app:latest'
        DOCKER_REGISTRY = 'hussainajhar32/project-1-sparta-app'
        DOCKER_REGISTRY_CREDENTIALS = 'dockerhub-credentials'
        GIT_CREDENTIALS = 'github-credentials'
        SSH_AGENT_CREDENTIALS = 'github-ssh-agent'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
        KUBERNETES_CREDENTIALS = 'kube-config'
        KUBERNETES_DEPLOYMENT_NAME = 'project-1-sparta-app-deployment'
        KUBERNETES_SERVICE_NAME = 'project-1-sparta-app-svc'
        DEV_BRANCH = 'dev'
        MAIN_BRANCH = 'main'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${env.DEV_BRANCH}", credentialsId: "${GIT_CREDENTIALS}", url: 'https://github.com/Hussainajhar8/DevOps_training.git'
            }
        }

        stage('Run Tests') {
            steps {
                dir('Post-Academy-Projects/Project-1-Implement-a-CI-CD-Pipeline/repo/app/') {
                    script {
                        // Replace with your testing commands
                        sh 'npm install'
                        sh 'npm test'
                    }
                }
            }
        }

        stage('Merge to Main') {
            steps {
                script {
                    sshagent(['github-ssh-agent']) {
                        sh 'git config --global user.email "hussainajhar8@gmail.com"'
                        sh 'git config --global user.name "hussainajhar8"'
                        sh 'mkdir -p ~/.ssh && chmod 700 ~/.ssh'
                        sh 'ssh-keyscan github.com >> ~/.ssh/known_hosts'
                        sh """
                        git checkout ${MAIN_BRANCH}
                        git merge ${DEV_BRANCH}
                        git push git@github.com:Hussainajhar8/DevOps_training.git ${MAIN_BRANCH}
                        """
                    }
                } 
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('Post-Academy-Projects/Project-1-Implement-a-CI-CD-Pipeline/repo/app/') {
                    script {
                        dockerImage = docker.build("${DOCKER_REGISTRY}:${env.BUILD_ID}")
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dir('Post-Academy-Projects/Project-1-Implement-a-CI-CD-Pipeline/repo/app/') {
                    script {
                        docker.withRegistry('', "${DOCKER_REGISTRY_CREDENTIALS}") {
                            dockerImage.push("${env.BUILD_ID}")
                            dockerImage.push('latest')
                        }
                    }
                }
            }
        }



        stage('Deploy to Kubernetes') {
            steps {
                dir('Post-Academy-Projects/Project-1-Implement-a-CI-CD-Pipeline/') {
                    script {
                        withCredentials([file(credentialsId: 'kube-config', variable: 'KUBECONFIG')]) {
                            sh """
                            kubectl apply -f kubernetes-manifests/deployment.yaml
                            kubectl apply -f kubernetes-manifests/service.yaml
                            kubectl set image deployment/${KUBERNETES_DEPLOYMENT_NAME} ${DOCKER_IMAGE}=${DOCKER_REGISTRY}:latest
                            kubectl rollout status deployment/${KUBERNETES_DEPLOYMENT_NAME}
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}